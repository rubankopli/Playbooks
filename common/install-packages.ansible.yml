---
# Install commands for the packages listed in the package inventory

- name: Install packages
  hosts: all
  become: true
  vars_files:
    - package-inventory.ansible.yml
  vars:
    deb_architecture_map: {
      "armv6l": "arm",
      "armv7l": "arm",
      "aarch64": "arm64",
      "x86_64": "amd64",
      "i386": "386"
    }

  pre_tasks:
    - name: Set deb style architecture name
      ansible.builtin.set_fact:
        deb_arch: "{{ [ansible_architecture] | map('extract', deb_architecture_map) }}"

    - name: Set lib type
      block:
        - name: Check for gnu libc
          ansible.builtin.command:
            cmd: which ldd
          register: ldd_check
          ignore_errors: true
          changed_when: false

        - name: Check for musl libc
          ansible.builtin.command:
            cmd: which musl
          register: musl_check
          ignore_errors: true
          changed_when: false

        - name: Set libc variable
          ansible.builtin.set_fact:
            libc: "{{ 'gnu' if ldd_check.rc == 0 else 'musl' if musl_check.rc == 0 else 'unknown' }}"

    # we use eget to make installing bin a bit easier, and bin to install and manage github binary releases
    - name: Install eget
      block:
        - name: Get latest eget version redirect url
          ansible.builtin.get_url:
            url: https://github.com/zyedidia/eget/releases/latest
            dest: /tmp/
            mode: 777
          register: release_info

        - name: Get version number from redirected url
          ansible.builtin.set_fact:
            latest_version: "{{ release_info.url.split('/')[-1] | regex_replace('^v', '') }}"

        - name: Download eget
          ansible.builtin.get_url:
            url: >-
                https://github.com/zyedidia/eget/releases/latest/download/
                eget-{{ latest_version }}-{{ ansible_system | lower }}_{{ deb_arch }}.tar.gz
            dest: /usr/local/bin/
            mode: 754
    # https://github.com/zyedidia/eget/blob/master/DOCS.md to see target rules
    # set EGET_BIN to decide where eget puts the binaries

    - name: Create package lists by install method
      ansible.builtin.set_fact:
        # List of all of the packages
        package_manager_packages: >-
          "{{
          (core_packages + core_utilities.values() |
          list + utility_services + gui_utilities + user_utilities) |
          selectattr('install_method', 'equalto', 'package_manager') | list
          }}"
        eget_packages: >-
          "{{
          (core_packages + core_utilities.values() | list)
          | selectattr('install_method', 'equalto', 'eget') | list
          }}"
        pip_packages: >-
          "{{
          (core_packages + core_utilities.values() | list) |
          selectattr('install_method', 'equalto', 'pip') | list
          }}"
        download_binary_packages: >-
          "{{
          (core_packages + core_utilities.values() | list) |
          selectattr('install_method', 'equalto', 'download_binary') | list
          }}"

    tasks:
      - name: Install packages available through package manager
        ansible.builtin.package:
          name: "{{ item.name }}"
          state: present
        loop: "{{ package_manager_packages: }}"

      - name: Install packages using pip
        ansible.builtin.pip:
          name: "{{ item.name }}"
        loop: "{{ pip_packages }}"

      - name: Install packages using eget
        ansible.builtin.command:
          cmd: >-
            "eget
            {{ item.filter | default(false) | ternary(' --filter' {{ item.filter }},'') }}
            {{ item.target }}
            {{ item.eget_man | default(false) | ternary(' && eget ' ~ {{ item.name }} ~ ' --filter man','') }}"
        loop: "{{ eget_packages }}"

      - name: Install binary download packages
        ansible.builtin.geturl:
          url: "{{ item.url }}"
          dest: "/usr/local/bin//{{ item.name }}"
          mode: 755
        loop: "{{ download_binary_packages }}"
